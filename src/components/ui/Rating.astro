---
/**
 * Rating Component
 * 
 * Exibe uma avaliação com estrelas.
 */
interface Props {
  value: number;
  max?: number;
  reviewCount?: number;
  size?: 'sm' | 'md' | 'lg';
  interactive?: boolean;
  name?: string;
  class?: string;
}

const { 
  value,
  max = 5,
  reviewCount,
  size = 'md',
  interactive = false,
  name = 'rating',
  class: className = '',
} = Astro.props;

// Garante que o valor esteja entre 0 e max
const normalizedValue = Math.max(0, Math.min(value, max));

// Calcula a porcentagem para estrelas preenchidas
const percentage = (normalizedValue / max) * 100;

// Gera array para renderizar estrelas
const stars = Array.from({ length: max }, (_, i) => i + 1);

// Classes de tamanho
const sizeClasses = {
  sm: 'h-3 w-3',
  md: 'h-4 w-4',
  lg: 'h-5 w-5'
};

// Classes do container
const containerClasses = [
  'flex',
  'items-center',
  className
].filter(Boolean).join(' ');
---

<div class={containerClasses}>
  <div class="relative inline-block">
    <div class="flex">
      {stars.map((star) => (
        <svg 
          class={`${sizeClasses[size]} text-gray-300`} 
          fill="currentColor" 
          viewBox="0 0 20 20" 
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
        </svg>
      ))}
    </div>
    
    <div class="absolute top-0 left-0 overflow-hidden" style={`width: ${percentage}%`}>
      <div class="flex">
        {stars.map((star) => (
          <svg 
            class={`${sizeClasses[size]} text-accent`} 
            fill="currentColor" 
            viewBox="0 0 20 20" 
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"></path>
          </svg>
        ))}
      </div>
    </div>
    
    {interactive && (
      <div class="absolute top-0 left-0 cursor-pointer opacity-0">
        {stars.map((star) => (
          <input 
            type="radio" 
            name={name} 
            value={star} 
            class="absolute inset-0 w-5 h-5 opacity-0 cursor-pointer z-10"
            checked={star === Math.round(normalizedValue)}
          />
        ))}
      </div>
    )}
  </div>
  
  {reviewCount !== undefined && (
    <span class="text-small text-gray-500 ml-xs">
      ({reviewCount})
    </span>
  )}
</div>