---
/**
 * Página de Listagem de Produtos
 * 
 * Apresenta os produtos de forma paginada com opções de filtro e ordenação.
 */
import MarketplaceLayout from '@/layouts/MarketplaceLayout.astro';
import ProductCard from '@/components/ui/ProductCard.astro';
import Filters from '@/components/ui/Filters.astro';

// Dados de exemplo - Produtos
const products = [
  {
    id: 'prod-27',
    name: 'Kit Berço Clássico Premium',
    price: 47.45,
    pricePromotional: 41.75,
    discountPercent: 12,
    photos: [{ url: 'https://picsum.photos/400?random=1001' }],
    attributes: {
      material: 'ALGODÃO',
      pieces: 9
    }
  },
  {
    id: 'prod-46',
    name: 'Almofada Decorativa Baby',
    price: 47.86,
    pricePromotional: 46.90,
    discountPercent: 2,
    photos: [{ url: 'https://picsum.photos/400?random=1002' }],
    attributes: {
      material: 'ALGODÃO',
      pieces: 3
    }
  },
  {
    id: 'prod-134',
    name: 'Protetor Berço Dupla Face',
    price: 110.33,
    pricePromotional: 85.57,
    discountPercent: 22,
    photos: [{ url: 'https://picsum.photos/400?random=1003' }],
    attributes: {
      material: 'ALGODÃO',
      pieces: 4
    }
  },
  {
    id: 'prod-85',
    name: 'Kit Berço Trança Off White',
    price: 559.80,
    pricePromotional: 329.90,
    discountPercent: 41,
    photos: [{ url: 'https://picsum.photos/400?random=1004' }],
    attributes: {
      material: 'POLIÉSTER',
      pieces: 8
    }
  },
  {
    id: 'prod-92',
    name: 'Conjunto Berço Luxo',
    price: 432.80,
    pricePromotional: 229.90,
    discountPercent: 47,
    photos: [{ url: 'https://picsum.photos/400?random=1005' }],
    attributes: {
      material: 'POLIÉSTER',
      pieces: 12
    }
  },
  {
    id: 'prod-114',
    name: 'Lençol Premium para Berço',
    price: 132.55,
    pricePromotional: 129.90,
    discountPercent: 2,
    photos: [{ url: 'https://picsum.photos/400?random=1006' }],
    attributes: {
      material: 'POLIÉSTER',
      pieces: 2
    }
  },
  {
    id: 'prod-118',
    name: 'Cobertor Macio Infantil',
    price: 89.90,
    pricePromotional: 74.90,
    discountPercent: 17,
    photos: [{ url: 'https://picsum.photos/400?random=1007' }],
    attributes: {
      material: 'ALGODÃO',
      pieces: 1
    }
  },
  {
    id: 'prod-122',
    name: 'Travesseiro Anatômico Baby',
    price: 59.90,
    pricePromotional: 45.90,
    discountPercent: 23,
    photos: [{ url: 'https://picsum.photos/400?random=1008' }],
    attributes: {
      material: 'ESPUMA',
      pieces: 1
    }
  }
];

// Formatar preço
function formatCurrency(value) {
  return new Intl.NumberFormat('pt-BR', {
    style: 'currency',
    currency: 'BRL',
    minimumFractionDigits: 2
  }).format(value);
}

// Título da página
const pageTitle = "Kit Berço";
const totalItems = 1000;
---

<MarketplaceLayout title={pageTitle}>
  <Fragment slot="navbar">
    <li>
      <a href="/produtos" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Todas as categorias</a>
    </li>
    <li>
      <a href="/produtos?categoria=meninos" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Meninos</a>
    </li>
    <li>
      <a href="/produtos?categoria=meninas" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Meninas</a>
    </li>
    <li>
      <a href="/produtos?categoria=kits-berco" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Kits Berço</a>
    </li>
    <li>
      <a href="/produtos?categoria=ninho" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Ninho</a>
    </li>
    <li>
      <a href="/produtos?categoria=bolsas-maternidade" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Bolsas Maternidade</a>
    </li>
    <li>
      <a href="/produtos?categoria=almofada-amamentacao" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Almofada Amamentação</a>
    </li>
    <li>
      <a href="/produtos?categoria=infantil" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Infantil</a>
    </li>
    <li>
      <a href="/produtos?categoria=lencol" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Lençol</a>
    </li>
    <li>
      <a href="/produtos?promo=75" class="text-pink300 hover:opacity-80 font-bold text-[13px] leading-[19.5px] flex items-center justify-center">75% OFF</a>
    </li>
    <li>
      <a href="/produtos?categoria=quarto-famosos" class="hover:opacity-80 font-semibold text-[13px] leading-[19.5px] flex items-center justify-center">Quarto dos famosos</a>
    </li>
  </Fragment>
<style>
  body {
    background-color: #F5F5F5;
    font-family: 'Lato', sans-serif;
  }
</style>
  <div class="max-w-[1400px] mx-auto px-4 py-4">
    <!-- Breadcrumbs com contador de produtos -->
    <div class="flex justify-between items-center mb-4">
      <nav aria-label="Breadcrumb">
        <ol class="flex items-center text-[13px]">
          <li>
            <a href="/" class="text-gray-500 hover:text-gray-700 transition-colors">Home</a>
          </li>
          <li class="flex items-center">
            <span class="mx-1 text-gray-400">/</span>
            <a href="/produtos" class="text-gray-500 hover:text-gray-700 transition-colors">Produtos</a>
          </li>
          <li class="flex items-center">
            <span class="mx-1 text-gray-400">/</span>
            <span class="text-[#39c7bb] font-medium">{pageTitle}</span>
          </li>
        </ol>
      </nav>
      
      <p class="text-sm text-gray-500">
        <span class="font-medium">{totalItems}</span> produtos encontrados
      </p>
    </div>
    
    <!-- Seção de filtros ativos com fundo branco -->
    <div class="bg-white p-3 mb-5 flex flex-wrap justify-between items-center">
      <div class="flex flex-wrap items-center gap-2">
        <span class="text-sm text-gray-800 font-medium">Filtros:</span>
        <div class="inline-flex items-center px-3 py-1 text-xs bg-[#E0F7F4] text-[#39c7bb]">
          <span>Algodão</span>
          <button class="ml-1.5 focus:outline-none text-[#39c7bb]">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <div class="inline-flex items-center px-3 py-1 text-xs bg-[#E0F7F4] text-[#39c7bb]">
          <span>P</span>
          <button class="ml-1.5 focus:outline-none text-[#39c7bb]">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <a href="#" class="text-xs text-[#39c7bb] hover:underline">
          Limpar todos
        </a>
      </div>
      
      <!-- Ordenação e visualização -->
      <div class="flex items-center gap-4">
        <div class="flex items-center">
          <span class="text-sm text-gray-600 mr-2 hidden sm:inline">Ordenar por:</span>
          <div class="relative">
            <select class="text-sm appearance-none bg-transparent focus:outline-none cursor-pointer pr-6">
              <option>Relevância</option>
              <option>Menor preço</option>
              <option>Maior preço</option>
              <option>Novidades</option>
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center text-gray-400">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </div>
          </div>
        </div>
        
        <div class="flex border border-gray-200">
          <button class="p-2 bg-[#39c7bb] text-white w-8 h-8 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
              <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6A2.25 2.25 0 016 3.75h2.25A2.25 2.25 0 0110.5 6v2.25a2.25 2.25 0 01-2.25 2.25H6a2.25 2.25 0 01-2.25-2.25V6zM3.75 15.75A2.25 2.25 0 016 13.5h2.25a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 18v-2.25zM13.5 6a2.25 2.25 0 012.25-2.25H18A2.25 2.25 0 0120.25 6v2.25A2.25 2.25 0 0118 10.5h-2.25a2.25 2.25 0 01-2.25-2.25V6zM13.5 15.75a2.25 2.25 0 012.25-2.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-2.25A2.25 2.25 0 0113.5 18v-2.25z" />
            </svg>
          </button>
          <button class="p-2 text-gray-400 bg-white w-8 h-8 flex items-center justify-center border-l border-gray-200">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
              <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 6.75h12M8.25 12h12m-12 5.25h12M3.75 6.75h.007v.008H3.75V6.75zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zM3.75 12h.007v.008H3.75V12zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm-.375 5.25h.007v.008H3.75v-.008zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
            </svg>
          </button>
        </div>
        
        <!-- Botão para mostrar/ocultar filtros no mobile -->
        <button 
          id="toggleFilters" 
          class="md:hidden flex items-center justify-center bg-[#39c7bb] text-white px-2 py-1 rounded-md text-sm"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
          </svg>
          Filtros
        </button>
      </div>
    </div>
    
    <!-- Conteúdo principal com filtros e produtos -->
    <div class="flex flex-col md:flex-row gap-5">
      <!-- Sidebar de filtros - Coluna esquerda (escondida no mobile por padrão) -->
      <div id="filtersContainer" class="hidden md:block w-full md:w-[260px] md:sticky md:top-4 md:self-start">
        <div class="mb-4 relative">
          <!-- Botão fechar visível apenas no mobile -->
          <button 
            id="closeFilters" 
            class="absolute top-2 right-2 md:hidden bg-white rounded-full p-1 shadow-sm z-10"
            aria-label="Fechar filtros"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          
          <Filters 
            categories={[
              { name: 'Kits Berço', count: 239, selected: true },
              { name: 'Enxoval', count: 226 },
              { name: 'Móveis', count: 259 },
              { name: 'Bolsas', count: 276 }
            ]}
            colors={[
              { name: 'Amarelo', count: 45, selected: true, hex: '#FFEB3B' },
              { name: 'Verde', count: 32, hex: '#4CAF50' },
              { name: 'Rosa', count: 67, hex: '#E91E63' },
              { name: 'Marrom', count: 29, hex: '#795548' },
              { name: 'Azul', count: 58, hex: '#2196F3' },
              { name: 'Vermelho', count: 41, hex: '#F44336' }
            ]}
            sizes={[
              { name: 'P', count: 120, selected: true },
              { name: 'M', count: 145 },
              { name: 'G', count: 98 }
            ]}
            materials={[
              { name: 'Algodão', count: 216, selected: true },
              { name: 'Poliéster', count: 184 },
              { name: 'Madeira', count: 78 }
            ]}
            hasImmediateDelivery={false}
            deliveryCount={710}
          />
        </div>
      </div>
      
      <!-- Overlay para mobile quando filtros estão abertos -->
      <div id="filtersOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden md:hidden"></div>
      
      <!-- Produtos - Área principal -->
      <div class="w-full md:flex-1">
        <!-- Produtos Grid - 3 por linha no desktop, 1 no mobile com espaçamento vertical aumentado -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-10 bg-white p-4">
          {products.map((product) => (
            <a href={`/produto/${product.id}`} class="block pt-7">
              <ProductCard 
                product={{
                  id: product.id,
                  name: product.name,
                  price: product.price,
                  pricePromotional: product.pricePromotional,
                  discountPercent: product.discountPercent,
                  pieces: product.attributes.pieces,
                  material: product.attributes.material,
                  image: product.photos && product.photos[0] ? product.photos[0].url : null,
                  ref: product.id
                }}
                showBadges={true}
              />
            </a>
          ))}
        </div>
        
        <!-- Botão e indicador de carregamento para scroll infinito -->
        <div class="py-4 text-center">
          <!-- Contador de produtos -->
          <span class="text-sm text-gray-500 block mb-4">
            Mostrando <span class="font-medium" id="products-shown">8</span> de <span class="font-medium">{totalItems}</span> produtos
          </span>
          
          <!-- Botão carregar mais para caso o scroll não seja detectado -->
          <button id="load-more-btn" class="mx-auto mb-4 bg-[#39c7bb] hover:bg-[#2ba090] text-white py-2 px-6 rounded-full inline-flex items-center gap-2">
            <span>Carregar mais produtos</span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
              <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
            </svg>
          </button>
          
          <!-- Loading indicator -->
          <div id="loading-indicator" class="py-4 flex-col items-center hidden">
            <div class="animate-spin rounded-full h-10 w-10 border-b-2 border-[#39c7bb] mb-2"></div>
            <p class="text-gray-500 text-sm">Carregando mais produtos...</p>
          </div>
          
          <!-- Fim da lista quando todos os produtos forem carregados -->
          <div id="end-of-results" class="py-4 hidden">
            <p class="text-gray-500 text-sm">Você viu todos os {totalItems} produtos 🎉</p>
          </div>
        </div>
        
        <!-- Script para scroll infinito (com fallback para botão) -->
        <script is:inline>
          // Para assegurar que o script execute corretamente
          document.addEventListener('DOMContentLoaded', () => {
            console.log('Script de scroll infinito iniciado');
            
            // Variáveis para controlar o estado da paginação
            let page = 1;
            const itemsPerPage = 8;
            const totalItems = {totalItems};
            let loading = false;
            let allItemsLoaded = false;
            
            // Elementos do DOM
            const loadingIndicator = document.getElementById('loading-indicator');
            const endOfResults = document.getElementById('end-of-results');
            const productsShown = document.getElementById('products-shown');
            const loadMoreBtn = document.getElementById('load-more-btn');
            const productsGrid = document.querySelector('.grid-cols-1.md\\:grid-cols-3');
            
            if (!productsGrid) {
              console.error('Grid de produtos não encontrado!');
              return;
            }
            
            // Função para carregar mais produtos
            async function loadMoreProducts() {
              if (loading || allItemsLoaded) return;
              
              console.log('Carregando mais produtos...');
              
              // Ativa o estado de carregamento
              loading = true;
              loadMoreBtn.style.display = 'none';
              loadingIndicator.classList.remove('hidden');
              loadingIndicator.classList.add('flex');
              
              try {
                // Simular uma requisição ao servidor
                await new Promise(resolve => setTimeout(resolve, 800));
                
                // Obtém os produtos existentes
                const currentProducts = productsGrid.querySelectorAll('a.block');
                const currentlyShown = currentProducts.length;
                
                console.log(`Produtos atuais: ${currentlyShown}`);
                
                if (currentlyShown < totalItems) {
                  // Clona produtos para simular carregamento
                  const productsToAdd = Math.min(itemsPerPage, currentProducts.length);
                  
                  for (let i = 0; i < productsToAdd; i++) {
                    const cloneIndex = i % currentProducts.length;
                    const clone = currentProducts[cloneIndex].cloneNode(true);
                    productsGrid.appendChild(clone);
                  }
                  
                  // Atualiza contadores
                  const newTotal = Math.min(currentlyShown + productsToAdd, totalItems);
                  productsShown.textContent = newTotal;
                  
                  console.log(`Novos produtos mostrados: ${newTotal}`);
                  
                  // Verifica se todos os produtos foram carregados
                  if (newTotal >= totalItems) {
                    allItemsLoaded = true;
                    endOfResults.classList.remove('hidden');
                  }
                } else {
                  allItemsLoaded = true;
                  endOfResults.classList.remove('hidden');
                }
              } catch (error) {
                console.error('Erro ao carregar mais produtos:', error);
              } finally {
                // Desativa o estado de carregamento
                loading = false;
                if (!allItemsLoaded) {
                  loadMoreBtn.style.display = 'inline-flex';
                }
                loadingIndicator.classList.add('hidden');
                loadingIndicator.classList.remove('flex');
              }
            }
            
            // Função para verificar se o usuário chegou perto do final da página
            function handleScroll() {
              if (loading || allItemsLoaded) return;
              
              // Detecta scroll
              const windowHeight = window.innerHeight;
              const documentHeight = document.documentElement.scrollHeight;
              const scrollPosition = window.scrollY;
              
              // Se estiver próximo do fim (200px antes do final)
              if (windowHeight + scrollPosition >= documentHeight - 200) {
                console.log('Próximo do final da página - carregando mais produtos');
                loadMoreProducts();
              }
            }
            
            // Adiciona os event listeners
            loadMoreBtn.addEventListener('click', loadMoreProducts);
            window.addEventListener('scroll', handleScroll);
            
            // Inicializa o contador
            productsShown.textContent = Math.min(productsGrid.querySelectorAll('a.block').length, totalItems);
            
            // Verifica imediatamente após a página carregar
            setTimeout(() => {
              console.log('Verificação inicial');
              handleScroll();
            }, 500);
          });
        </script>
      </div>
    </div>
  </div>

  <script>
    // Função para mostrar os filtros no mobile
    function showFilters() {
      document.getElementById('filtersContainer').classList.remove('hidden');
      document.getElementById('filtersContainer').classList.add('fixed', 'inset-y-0', 'left-0', 'w-[80%]', 'max-w-xs', 'z-50', 'bg-white', 'shadow-xl', 'overflow-y-auto');
      document.getElementById('filtersOverlay').classList.remove('hidden');
      // Prevenir scroll do body
      document.body.style.overflow = 'hidden';
    }

    // Função para esconder os filtros no mobile
    function hideFilters() {
      document.getElementById('filtersContainer').classList.add('hidden');
      document.getElementById('filtersContainer').classList.remove('fixed', 'inset-y-0', 'left-0', 'w-[80%]', 'max-w-xs', 'z-50', 'bg-white', 'shadow-xl', 'overflow-y-auto');
      document.getElementById('filtersOverlay').classList.add('hidden');
      // Restaurar scroll do body
      document.body.style.overflow = '';
    }

    // Detectar quando a tela é redimensionada para desktop
    function handleResize() {
      if (window.innerWidth >= 768) { // 768px é o breakpoint md no Tailwind
        document.getElementById('filtersContainer').classList.remove('fixed', 'inset-y-0', 'left-0', 'w-[80%]', 'max-w-xs', 'z-50', 'bg-white', 'shadow-xl', 'overflow-y-auto');
        document.getElementById('filtersContainer').classList.remove('hidden');
        document.getElementById('filtersContainer').classList.add('block');
        document.getElementById('filtersOverlay').classList.add('hidden');
        document.body.style.overflow = '';
      } else {
        document.getElementById('filtersContainer').classList.add('hidden');
        document.getElementById('filtersContainer').classList.remove('block');
      }
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', function() {
      const toggleButton = document.getElementById('toggleFilters');
      const closeButton = document.getElementById('closeFilters');
      const overlay = document.getElementById('filtersOverlay');
      
      if (toggleButton) {
        toggleButton.addEventListener('click', showFilters);
      }
      
      if (closeButton) {
        closeButton.addEventListener('click', hideFilters);
      }
      
      if (overlay) {
        overlay.addEventListener('click', hideFilters);
      }
      
      // Verificar tamanho da tela quando a janela é redimensionada
      window.addEventListener('resize', handleResize);
      
      // Inicializar
      handleResize();
    });
  </script>
</MarketplaceLayout>