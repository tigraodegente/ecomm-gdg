---
/**
 * Página de Detalhes do Produto
 * 
 * Exibe informações detalhadas sobre um produto específico.
 * Baseado na imagem de referência do marketplace Grão de Gente.
 */
import MarketplaceLayout from "@/layouts/MarketplaceLayout.astro";
import Rating from '@/components/ui/Rating.astro';
import Breadcrumb from '@/components/ui/Breadcrumb.astro';
import Button from '@/components/ui/Button.astro';
import Badge from '@/components/ui/Badge.astro';
import ProductCard from '@/components/ui/ProductCard.astro';

// Produtos de amostra
const allProducts = [
  {
    id: '1',
    name: 'Berço Montessoriano Cinza',
    price: 899.90,
    oldPrice: 1099.90,
    image: 'https://placehold.co/600x400?text=Berço',
    images: [
      'https://placehold.co/600x400?text=Berço-1',
      'https://placehold.co/600x400?text=Berço-2',
      'https://placehold.co/600x400?text=Berço-3',
      'https://placehold.co/600x400?text=Berço-4',
    ],
    vendorName: 'Móveis Infantis Ltda',
    vendorId: 'vendor1',
    rating: 4.8,
    reviewCount: 32,
    badges: [
      { text: 'Destaque', variant: 'primary' },
      { text: '-18%', variant: 'accent' }
    ],
    category: 'quarto',
    categoryName: 'Quarto do Bebê',
    subcategory: 'bercos',
    subcategoryName: 'Berços',
    description: `<p>O Berço Montessoriano Cinza foi desenvolvido para proporcionar conforto, segurança e estilo para o quarto do seu bebê.</p>
    <p>Produzido com madeira de alta qualidade e acabamento premium, este berço apresenta design moderno e versátil que combina com qualquer decoração.</p>
    <p>Seguindo a filosofia montessoriana, o berço fica mais próximo ao chão, permitindo que a criança tenha autonomia para entrar e sair conforme seu desenvolvimento.</p>
    <h3>Características:</h3>
    <ul>
      <li>Dimensões: 70cm x 130cm x 40cm (AxLxP)</li>
      <li>Material: Madeira maciça de reflorestamento</li>
      <li>Acabamento com tintas atóxicas</li>
      <li>Suporta até 30kg</li>
      <li>Certificado pelo INMETRO</li>
      <li>Inclui colchão ortopédico D18</li>
    </ul>`,
    specifications: [
      { name: 'Material', value: 'Madeira Pinus e MDF' },
      { name: 'Peso', value: '18kg' },
      { name: 'Dimensões', value: '70 x 130 x 40 cm' },
      { name: 'Idade Recomendada', value: '0 a 5 anos' },
      { name: 'Capacidade', value: 'Até 30kg' },
      { name: 'Garantia', value: '1 ano contra defeitos de fabricação' },
      { name: 'Certificação', value: 'INMETRO e ABNT NBR 15860' },
      { name: 'Cor', value: 'Cinza' },
      { name: 'Inclui', value: 'Berço, colchão, manual de montagem e parafusos' }
    ],
    variations: [
      { name: 'cor', options: ['Cinza', 'Branco', 'Bege', 'Natural'] },
      { name: 'tamanho', options: ['Padrão', 'Mini'] }
    ],
    inStock: true,
    deliveryEstimate: '5 a 7 dias úteis',
    sku: 'BRCO-MONT-CZ-001',
    reviews: [
      { author: 'Maria Silva', rating: 5, date: '10/01/2025', text: 'Excelente produto, meu bebê adora! Entrega rápida e produto conforme descrito.' },
      { author: 'João Santos', rating: 4, date: '28/12/2024', text: 'Berço muito bonito e resistente. Montagem um pouco complicada, mas o resultado final valeu a pena.' },
      { author: 'Ana Oliveira', rating: 5, date: '15/12/2024', text: 'Simplesmente perfeito! Material de qualidade e design encantador.' }
    ],
    relatedProducts: ['2', '6', '8']
  },
  {
    id: '2',
    name: 'Kit Enxoval Completo Nuvem Azul',
    price: 349.90,
    oldPrice: 429.90,
    image: 'https://placehold.co/300x300?text=Enxoval',
    vendorName: 'Baby Shop',
    vendorId: 'vendor2',
    rating: 4.5,
    reviewCount: 18,
    badges: [
      { text: '-20%', variant: 'accent' }
    ],
    category: 'enxoval',
    categoryName: 'Enxoval',
    inStock: true,
    pieces: 9
  },
  {
    id: '6',
    name: 'Kit Berço 9 Peças Coroa Azul',
    price: 269.90,
    oldPrice: 299.90,
    image: 'https://placehold.co/300x300?text=Kit',
    vendorName: 'Grão de Gente',
    vendorId: 'vendor6',
    rating: 4.7,
    reviewCount: 28,
    category: 'enxoval',
    categoryName: 'Enxoval',
    inStock: true,
    pieces: 9
  },
  {
    id: '8',
    name: 'Cômoda Infantil 4 Gavetas',
    price: 699.90,
    oldPrice: 799.90,
    image: 'https://placehold.co/300x300?text=Comoda',
    vendorName: 'Móveis Infantis Ltda',
    vendorId: 'vendor1',
    rating: 4.6,
    reviewCount: 21,
    badges: [
      { text: '-13%', variant: 'accent' }
    ],
    category: 'quarto',
    categoryName: 'Quarto do Bebê',
    inStock: true
  }
];

// Capturar o ID do produto
const { id } = Astro.params;

// Buscar o produto pelo ID
const product = allProducts.find(p => p.id === id);

// Caso o produto não seja encontrado, redirecionamos para a página de produtos
if (!product) {
  return Astro.redirect('/produtos');
}

// Calcular desconto
const discount = product.oldPrice 
  ? Math.round(((product.oldPrice - product.price) / product.oldPrice) * 100) 
  : 0;

// Formatar preço
const formatPrice = (price: number) => {
  return price.toLocaleString('pt-BR', {
    style: 'currency',
    currency: 'BRL',
  });
};

// Formatar preço de parcelas
const installmentCount = 12; // Número máximo de parcelas
const installmentPrice = product.price / installmentCount;

// Buscar produtos relacionados
const relatedProducts = product.relatedProducts 
  ? allProducts.filter(p => product.relatedProducts.includes(p.id))
  : [];

// Configurar o breadcrumb
const breadcrumb = [
  { name: 'Home', url: '/' },
  { name: 'Produtos', url: '/produtos' }
];

if (product.categoryName) {
  breadcrumb.push({
    name: product.categoryName, 
    url: `/produtos?categoria=${product.category}`
  });
}

if (product.subcategoryName) {
  breadcrumb.push({
    name: product.subcategoryName, 
    url: `/produtos?categoria=${product.category}&subcategoria=${product.subcategory}`
  });
}

breadcrumb.push({
  name: product.name,
  url: `/produto/${product.id}`
});
---

<MarketplaceLayout
  title={product.name}
  description={`${product.name} - ${product.categoryName || 'Produto Infantil'} | Grão de Gente`}
>
  <style>
    body {
      background-color: #F5F5F5;
      font-family: 'Lato', sans-serif;
    }
  </style>
  {/* Breadcrumb */}
  <div class="max-w-[1400px] mx-auto px-4 py-4">
    <Breadcrumb items={breadcrumb} />
  </div>

  {/* Seção Principal do Produto */}
  <div class="bg-white py-8">
    <div class="max-w-[1400px] mx-auto px-4">
      {/* Mobile - Layout Vertical */}
      <div class="lg:hidden">
        {/* Nome do Produto e Vendor */}
        <div class="mb-4">
          <h1 class="text-[20px] font-bold text-gray-800 mb-2 leading-tight">
            {product.name}
          </h1>
          <div class="flex items-center mb-2">
            <span class="text-[13px] text-[#39c7bb]">
              Vendido e entregue por: 
              <a href={`/vendors/${product.vendorId}`} class="underline hover:no-underline">
                {product.vendorName}
              </a>
            </span>
          </div>
          <div class="flex items-center">
            <Rating value={product.rating} size="sm" />
            <span class="text-[13px] text-gray-500 ml-1">
              ({product.reviewCount} avaliações)
            </span>
            <span class="mx-2 text-gray-300">|</span>
            <span class="text-[13px] text-gray-500">
              Código: {product.sku}
            </span>
          </div>
        </div>

        {/* Imagem Principal */}
        <div class="relative mb-4">
          {/* Badges */}
          {product.badges && product.badges.length > 0 && (
            <div class="absolute top-2 left-2 z-10 flex flex-col gap-1">
              {product.badges.map(badge => (
                <Badge text={badge.text} variant={badge.variant} />
              ))}
            </div>
          )}
          
          {/* Discount Badge */}
          {discount > 0 && (
            <div class="absolute right-2 -top-8 py-[2px] z-10">
              <div class="flex items-center text-[14px] font-bold">
                <span class="text-gray-800">{discount}% </span>
                <span class="text-[#39c7bb]">OFF</span>
              </div>
            </div>
          )}
          
          {/* Imagem */}
          <div class="mb-2 relative" x-data="{ activeImage: '${product.image}' }">
            <img 
              x-bind:src="activeImage" 
              alt={product.name} 
              class="w-full h-auto rounded-lg object-contain"
              style="height: 300px;"
            />
            
            {/* Wishlist Button */}
            <button 
              class="absolute top-4 right-4 h-10 w-10 rounded-full bg-white text-gray-400 flex items-center justify-center shadow-sm"
              x-data="{}"
              x-on:click="$store.wishlist.toggle('${product.id}')"
              x-bind:class="$store.wishlist.has('${product.id}') ? 'text-red-500' : 'text-gray-400'"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
              </svg>
            </button>
          </div>
          
          {/* Miniaturas das imagens */}
          {product.images && (
            <div class="flex gap-2 justify-start overflow-x-auto pb-2 no-scrollbar">
              <button 
                class="w-[70px] h-[70px] border-2 rounded p-1 flex items-center justify-center"
                x-data="{}"
                x-on:click="activeImage = '${product.image}'"
                x-bind:class="activeImage === '${product.image}' ? 'border-[#39c7bb]' : 'border-gray-200'"
              >
                <img src={product.image} alt={product.name} class="max-h-full max-w-full object-contain" />
              </button>
              
              {product.images.map((img, index) => (
                <button 
                  class="w-[70px] h-[70px] border-2 rounded p-1 flex items-center justify-center"
                  x-data="{}"
                  x-on:click={`activeImage = '${img}'`}
                  x-bind:class={`activeImage === '${img}' ? 'border-[#39c7bb]' : 'border-gray-200'`}
                >
                  <img src={img} alt={`${product.name} - imagem ${index + 1}`} class="max-h-full max-w-full object-contain" />
                </button>
              ))}
            </div>
          )}
        </div>
        
        {/* Preço e Adição ao Carrinho */}
        <div class="border border-gray-200 rounded-lg p-4 mb-6">
          <div class="mb-3">
            {product.oldPrice && (
              <span class="text-[14px] text-gray-500 line-through block">
                {formatPrice(product.oldPrice)}
              </span>
            )}
            <span class="text-[24px] font-bold text-[#39c7bb] block">
              {formatPrice(product.price)}
            </span>
            <span class="text-[14px] text-gray-700 block">
              {installmentCount}x de {formatPrice(installmentPrice)} sem juros
            </span>
            <span class="text-[14px] text-gray-600 block">
              {formatPrice(product.price)} no pix
            </span>
          </div>
          
          {/* Variações do produto */}
          {product.variations && product.variations.map(variation => (
            <div class="mb-4">
              <label class="block text-[14px] font-medium text-gray-700 mb-1">
                {variation.name.charAt(0).toUpperCase() + variation.name.slice(1)}:
              </label>
              <div class="flex flex-wrap gap-2">
                {variation.options.map((option, idx) => (
                  <label class="flex items-center">
                    <input 
                      type="radio" 
                      name={`variation-${variation.name}`} 
                      value={option} 
                      class="hidden peer" 
                      checked={idx === 0}
                    />
                    <span class="px-3 py-1 border-2 rounded-full text-[13px] cursor-pointer peer-checked:border-[#4DC0B5] peer-checked:text-[#4DC0B5] peer-checked:font-medium border-gray-200">
                      {option}
                    </span>
                  </label>
                ))}
              </div>
            </div>
          ))}
          
          {/* Quantidade */}
          <div class="mb-4">
            <label class="block text-[14px] font-medium text-gray-700 mb-1">
              Quantidade:
            </label>
            <div class="flex items-center border border-gray-300 rounded-full w-[120px]">
              <button 
                type="button"
                class="w-10 h-10 flex items-center justify-center text-gray-600"
                x-data="{}"
                x-on:click="$el.nextElementSibling.value > 1 ? $el.nextElementSibling.value-- : ''"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                </svg>
              </button>
              <input 
                type="number" 
                min="1" 
                value="1" 
                class="h-10 w-[40px] text-center border-0 focus:ring-0"
                x-ref="quantity"
              />
              <button 
                type="button"
                class="w-10 h-10 flex items-center justify-center text-gray-600"
                x-data="{}"
                x-on:click="$el.previousElementSibling.value++"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
              </button>
            </div>
          </div>
          
          {/* Status de estoque */}
          <div class="mb-4">
            {product.inStock ? (
              <span class="text-green-600 flex items-center text-[14px]">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                Produto em estoque
              </span>
            ) : (
              <span class="text-red-600 flex items-center text-[14px]">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
                Produto indisponível
              </span>
            )}
          </div>
          
          {/* Prazo de entrega */}
          {product.deliveryEstimate && (
            <div class="mb-4 flex items-center text-[14px] text-gray-700">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              Entrega estimada em <strong class="font-medium">{product.deliveryEstimate}</strong>
            </div>
          )}
          
          {/* Botões de ação */}
          <div class="space-y-3">
            <button 
              class="w-full bg-[#39c7bb] hover:bg-[#309990] text-white font-medium py-3 px-6 rounded-full text-[15px] transition-colors"
              x-data="{}"
              x-on:click="$store.cart.addItem({
                id: '${product.id}',
                name: '${product.name}',
                price: ${product.price},
                image: '${product.image}',
                quantity: parseInt($refs.quantity.value) || 1,
                vendorId: '${product.vendorId}',
                vendorName: '${product.vendorName}'
              }); window.dispatchEvent(new CustomEvent('toast', {
                detail: {
                  message: 'Produto adicionado ao carrinho!',
                  type: 'success'
                }
              }))"
              disabled={!product.inStock}
            >
              Adicionar ao carrinho
            </button>
            
            <button 
              class="w-full border-2 border-[#39c7bb] text-[#39c7bb] font-medium py-3 px-6 rounded-full text-[15px] transition-colors hover:bg-gray-50"
              x-data="{}"
              x-on:click="$store.wishlist.toggle('${product.id}'); window.dispatchEvent(new CustomEvent('toast', {
                detail: {
                  message: $store.wishlist.has('${product.id}') ? 'Produto adicionado aos favoritos!' : 'Produto removido dos favoritos!',
                  type: 'info'
                }
              }))"
            >
              <span x-data="{}" x-text="$store.wishlist.has('${product.id}') ? 'Remover dos favoritos' : 'Adicionar aos favoritos'">
                Adicionar aos favoritos
              </span>
            </button>
          </div>
        </div>
      </div>
      
      {/* Desktop - Layout Horizontal */}
      <div class="hidden lg:grid lg:grid-cols-2 lg:gap-8">
        {/* Coluna da Esquerda - Galeria */}
        <div class="relative">
          {/* Imagem Principal */}
          <div class="mb-4 relative" x-data="{ activeImage: '${product.image}' }">
            {/* Badges */}
            {product.badges && product.badges.length > 0 && (
              <div class="absolute top-4 left-4 z-10 flex flex-col gap-1">
                {product.badges.map(badge => (
                  <Badge text={badge.text} variant={badge.variant} />
                ))}
              </div>
            )}
            
            {/* Discount Badge */}
            {discount > 0 && (
              <div class="absolute top-4 right-4 z-10">
                <div class="py-[2px] flex items-center">
                  <span class="text-gray-800 text-[14px] font-bold">{discount}% </span>
                  <span class="text-[#39c7bb] text-[14px] font-bold">OFF</span>
                </div>
              </div>
            )}
            
            <img 
              x-bind:src="activeImage" 
              alt={product.name} 
              class="w-full h-auto rounded-lg object-contain"
              style="height: 450px;"
            />
            
            {/* Wishlist Button */}
            <button 
              class="absolute top-4 right-4 h-12 w-12 rounded-full bg-white text-gray-400 flex items-center justify-center shadow-sm"
              x-data="{}"
              x-on:click="$store.wishlist.toggle('${product.id}')"
              x-bind:class="$store.wishlist.has('${product.id}') ? 'text-red-500' : 'text-gray-400'"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
              </svg>
            </button>
          </div>
          
          {/* Miniaturas das imagens */}
          {product.images && (
            <div class="grid grid-cols-5 gap-2">
              <button 
                class="aspect-square border-2 rounded p-1 flex items-center justify-center"
                x-data="{}"
                x-on:click="activeImage = '${product.image}'"
                x-bind:class="activeImage === '${product.image}' ? 'border-[#39c7bb]' : 'border-gray-200'"
              >
                <img src={product.image} alt={product.name} class="max-h-full max-w-full object-contain" />
              </button>
              
              {product.images.map((img, index) => (
                <button 
                  class="aspect-square border-2 rounded p-1 flex items-center justify-center"
                  x-data="{}"
                  x-on:click={`activeImage = '${img}'`}
                  x-bind:class={`activeImage === '${img}' ? 'border-[#39c7bb]' : 'border-gray-200'`}
                >
                  <img src={img} alt={`${product.name} - imagem ${index + 1}`} class="max-h-full max-w-full object-contain" />
                </button>
              ))}
            </div>
          )}
        </div>
        
        {/* Coluna da Direita - Detalhes e Compra */}
        <div>
          {/* Nome e Vendor */}
          <div class="mb-4">
            <h1 class="text-[28px] font-bold text-gray-800 mb-2 leading-tight">
              {product.name}
            </h1>
            <div class="flex items-center mb-3">
              <span class="text-[15px] text-[#39c7bb]">
                Vendido e entregue por: 
                <a href={`/vendors/${product.vendorId}`} class="underline hover:no-underline">
                  {product.vendorName}
                </a>
              </span>
            </div>
            <div class="flex items-center mb-4">
              <Rating value={product.rating} size="md" />
              <span class="text-[15px] text-gray-500 ml-2">
                ({product.reviewCount} avaliações)
              </span>
              <span class="mx-3 text-gray-300">|</span>
              <span class="text-[15px] text-gray-500">
                Código: {product.sku}
              </span>
            </div>
          </div>
          
          {/* Preço e Compra */}
          <div class="border border-gray-200 rounded-lg p-6 mb-6">
            <div class="mb-4">
              {product.oldPrice && (
                <span class="text-[16px] text-gray-500 line-through block">
                  {formatPrice(product.oldPrice)}
                </span>
              )}
              <span class="text-[32px] font-bold text-[#39c7bb] block">
                {formatPrice(product.price)}
              </span>
              <span class="text-[16px] text-gray-700 block">
                {installmentCount}x de {formatPrice(installmentPrice)} sem juros
              </span>
              <span class="text-[16px] text-gray-600 block">
                {formatPrice(product.price)} no pix
              </span>
            </div>
            
            {/* Variações do produto */}
            {product.variations && product.variations.map(variation => (
              <div class="mb-4">
                <label class="block text-[16px] font-medium text-gray-700 mb-2">
                  {variation.name.charAt(0).toUpperCase() + variation.name.slice(1)}:
                </label>
                <div class="flex flex-wrap gap-2">
                  {variation.options.map((option, idx) => (
                    <label class="flex items-center">
                      <input 
                        type="radio" 
                        name={`variation-${variation.name}`} 
                        value={option} 
                        class="hidden peer" 
                        checked={idx === 0}
                      />
                      <span class="px-4 py-2 border-2 rounded-full text-[14px] cursor-pointer peer-checked:border-[#4DC0B5] peer-checked:text-[#4DC0B5] peer-checked:font-medium border-gray-200">
                        {option}
                      </span>
                    </label>
                  ))}
                </div>
              </div>
            ))}
            
            {/* Quantidade */}
            <div class="mb-4">
              <label class="block text-[16px] font-medium text-gray-700 mb-2">
                Quantidade:
              </label>
              <div class="flex items-center border border-gray-300 rounded-full w-[140px]">
                <button 
                  type="button"
                  class="w-12 h-12 flex items-center justify-center text-gray-600"
                  x-data="{}"
                  x-on:click="$el.nextElementSibling.value > 1 ? $el.nextElementSibling.value-- : ''"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                  </svg>
                </button>
                <input 
                  type="number" 
                  min="1" 
                  value="1" 
                  class="h-12 w-[40px] text-center border-0 focus:ring-0"
                  x-ref="quantityDesktop"
                />
                <button 
                  type="button"
                  class="w-12 h-12 flex items-center justify-center text-gray-600"
                  x-data="{}"
                  x-on:click="$el.previousElementSibling.value++"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                  </svg>
                </button>
              </div>
            </div>
            
            {/* Status de estoque */}
            <div class="mb-4">
              {product.inStock ? (
                <span class="text-green-600 flex items-center text-[15px]">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  Produto em estoque
                </span>
              ) : (
                <span class="text-red-600 flex items-center text-[15px]">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                  Produto indisponível
                </span>
              )}
            </div>
            
            {/* Prazo de entrega */}
            {product.deliveryEstimate && (
              <div class="mb-4 flex items-center text-[15px] text-gray-700">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Entrega estimada em <strong class="font-medium">{product.deliveryEstimate}</strong>
              </div>
            )}
            
            {/* Botões de ação */}
            <div class="flex space-x-3">
              <button 
                class="flex-1 bg-[#39c7bb] hover:bg-[#309990] text-white font-medium py-3 px-6 rounded-full text-[16px] transition-colors"
                x-data="{}"
                x-on:click="$store.cart.addItem({
                  id: '${product.id}',
                  name: '${product.name}',
                  price: ${product.price},
                  image: '${product.image}',
                  quantity: parseInt($refs.quantityDesktop.value) || 1,
                  vendorId: '${product.vendorId}',
                  vendorName: '${product.vendorName}'
                }); window.dispatchEvent(new CustomEvent('toast', {
                  detail: {
                    message: 'Produto adicionado ao carrinho!',
                    type: 'success'
                  }
                }))"
                disabled={!product.inStock}
              >
                Adicionar ao carrinho
              </button>
              
              <button 
                class="w-[50px] h-[50px] border-2 border-[#39c7bb] text-[#39c7bb] rounded-full flex items-center justify-center transition-colors hover:bg-gray-50"
                x-data="{}"
                x-on:click="$store.wishlist.toggle('${product.id}'); window.dispatchEvent(new CustomEvent('toast', {
                  detail: {
                    message: $store.wishlist.has('${product.id}') ? 'Produto adicionado aos favoritos!' : 'Produto removido dos favoritos!',
                    type: 'info'
                  }
                }))"
                title="Adicionar aos favoritos"
              >
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  class="h-6 w-6" 
                  fill="currentColor" 
                  viewBox="0 0 24 24"
                  x-bind:fill="$store.wishlist.has('${product.id}') ? 'currentColor' : 'none'"
                  x-bind:stroke="$store.wishlist.has('${product.id}') ? 'none' : 'currentColor'"
                >
                  <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" stroke-width="2"/>
                </svg>
              </button>
            </div>
          </div>
          
          {/* Vantagens/Benefícios */}
          <div class="grid grid-cols-3 gap-4 mb-6">
            <div class="flex flex-col items-center text-center p-3 border border-gray-200 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-[#39c7bb] mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span class="text-[14px] font-medium">Entrega Rápida</span>
            </div>
            <div class="flex flex-col items-center text-center p-3 border border-gray-200 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-[#39c7bb] mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
              </svg>
              <span class="text-[14px] font-medium">Garantia de Qualidade</span>
            </div>
            <div class="flex flex-col items-center text-center p-3 border border-gray-200 rounded-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-[#39c7bb] mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
              </svg>
              <span class="text-[14px] font-medium">Troca Facilitada</span>
            </div>
          </div>
        </div>
      </div>
      
      {/* Abas de Descrição, Especificações e Avaliações */}
      <div class="mt-8" x-data="{ activeTab: 'description' }">
        {/* Abas */}
        <div class="border-b border-gray-200">
          <div class="flex overflow-x-auto space-x-4">
            <button 
              class="py-3 px-1 border-b-2 font-medium text-[16px] transition-colors whitespace-nowrap"
              x-bind:class="activeTab === 'description' ? 'border-[#39c7bb] text-[#39c7bb]' : 'border-transparent text-gray-500 hover:text-gray-700'"
              x-on:click="activeTab = 'description'"
            >
              Descrição
            </button>
            <button 
              class="py-3 px-1 border-b-2 font-medium text-[16px] transition-colors whitespace-nowrap"
              x-bind:class="activeTab === 'specifications' ? 'border-[#39c7bb] text-[#39c7bb]' : 'border-transparent text-gray-500 hover:text-gray-700'"
              x-on:click="activeTab = 'specifications'"
            >
              Especificações
            </button>
            <button 
              class="py-3 px-1 border-b-2 font-medium text-[16px] transition-colors whitespace-nowrap"
              x-bind:class="activeTab === 'reviews' ? 'border-[#39c7bb] text-[#39c7bb]' : 'border-transparent text-gray-500 hover:text-gray-700'"
              x-on:click="activeTab = 'reviews'"
            >
              Avaliações ({product.reviewCount})
            </button>
          </div>
        </div>
        
        {/* Conteúdo das Abas */}
        <div class="mt-4">
          {/* Descrição */}
          <div x-show="activeTab === 'description'" class="prose max-w-none">
            <div set:html={product.description} class="text-[15px] leading-relaxed text-gray-700" />
          </div>
          
          {/* Especificações */}
          <div x-show="activeTab === 'specifications'" class="divide-y border-t border-b">
            {product.specifications && product.specifications.map((spec, index) => (
              <div class={`py-3 grid grid-cols-3 gap-4 ${index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}`}>
                <dt class="font-medium text-gray-700 text-[14px] lg:text-[15px]">{spec.name}</dt>
                <dd class="col-span-2 text-gray-700 text-[14px] lg:text-[15px]">{spec.value}</dd>
              </div>
            ))}
          </div>
          
          {/* Avaliações */}
          <div x-show="activeTab === 'reviews'">
            <div class="mb-6">
              <div class="flex items-center mb-4">
                <div class="flex items-center mr-4">
                  <span class="text-[32px] font-bold text-gray-900 mr-2">{product.rating}</span>
                  <div>
                    <Rating value={product.rating} size="lg" />
                    <span class="text-[14px] text-gray-600">{product.reviewCount} avaliações</span>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Lista de Avaliações */}
            <div class="space-y-6">
              {product.reviews && product.reviews.map(review => (
                <div class="border-b border-gray-200 pb-6">
                  <div class="flex items-center mb-3">
                    <Rating value={review.rating} size="sm" />
                    <span class="ml-2 text-[14px] font-medium text-gray-700">{review.author}</span>
                    <span class="mx-2 text-gray-300">|</span>
                    <span class="text-[14px] text-gray-500">{review.date}</span>
                  </div>
                  <p class="text-[15px] text-gray-700">{review.text}</p>
                </div>
              ))}
            </div>
            
            {/* Botão para Avaliar */}
            <div class="mt-6">
              <button 
                class="border-2 border-[#39c7bb] text-[#39c7bb] font-medium py-2 px-4 rounded-full text-[15px] transition-colors hover:bg-gray-50"
              >
                Avaliar este produto
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Produtos Relacionados */}
      {relatedProducts.length > 0 && (
        <div class="mt-16">
          <h2 class="text-2xl font-bold text-gray-800 mb-6">Produtos Relacionados</h2>
          <div class="flex flex-wrap justify-start gap-6">
            {relatedProducts.map(product => (
              <a href={`/produto/${product.id}`} class="block">
                <ProductCard product={product} />
              </a>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
</MarketplaceLayout>