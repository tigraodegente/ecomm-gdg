---
import "trix/dist/trix.css";
import { SEO } from "astro-seo";
import Icon from "astro-iconify";
import "@/global.css";
import ServiceWorkerScript from '@/components/ServiceWorkerScript.astro';
import { extractCriticalCSS, generateAsyncCSSLoader } from '../lib/performance/critical-css.js';
import { generateOptimizedFontHtml } from '../lib/performance/font-loader.js';

interface Props {
  title: string;
  description?: string;
  bodyClasses?: string;
  canonicalUrl?: string;
  faviconUrl?: string;
  ogImageUrl?: string;
}

const { title, description = "", bodyClasses, canonicalUrl, faviconUrl, ogImageUrl = "/og-image.png" } = Astro.props;

// Definir as fontes otimizadas para o site
const optimizedFonts = [
  {
    family: 'Inter',
    weight: '400',
    style: 'normal',
    display: 'swap',
    url: '/fonts/inter-v12-latin-regular.{format}',
    formats: ['woff2', 'woff'],
    unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',
    sizeAdjust: 100,
    critical: true
  },
  {
    family: 'Inter',
    weight: '700',
    style: 'normal',
    display: 'swap',
    url: '/fonts/inter-v12-latin-700.{format}',
    formats: ['woff2', 'woff'],
    unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',
    sizeAdjust: 100,
    critical: true
  }
];

// Gerar HTML para fontes otimizadas
const fontHtml = generateOptimizedFontHtml(optimizedFonts);

// Definir DNS preconnect para recursos externos importantes
const preconnectDomains = [
  'https://imagedelivery.net',
  'https://assets.onedollarstats.com',
  'https://unpkg.com'
];

// Determinar se a página atual é uma página crítica para precarregamento
const isHomePage = Astro.url.pathname === '/';
const isProductPage = Astro.url.pathname.includes('/produto/');
const isProductListPage = Astro.url.pathname.includes('/produtos');
const isCriticalPage = isHomePage || isProductPage || isProductListPage;

// Recursos críticos a serem pré-carregados
const criticalResources = [];
if (isHomePage) {
  criticalResources.push('/images/logo.svg');
}
---

<!doctype html>
<html
  lang="en"
  x-data={`{
    toastMessage: '',
    toastErrorMessage: ''
  }`}
  class="bg-slate-50"
>
  <!-- "For God so loved the world that he gave his one and only Son, that whoever believes in him shall not perish but have eternal life." John 3:16 NIV -->
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description || title} />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, viewport-fit=cover"
    />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/sitemap.xml" />

    {/* 
      DNS Preconnect para domínios externos críticos
      Isso inicia a conexão DNS antes mesmo de requisitar recursos,
      acelerando o carregamento dos primeiros recursos de cada domínio
    */}
    {preconnectDomains.map(domain => (
      <link rel="preconnect" href={domain} crossorigin />
      <link rel="dns-prefetch" href={domain} />
    ))}
    
    {/* Preload de recursos críticos específicos de cada página */}
    {criticalResources.map(resource => (
      <link rel="preload" href={resource} as={resource.endsWith('.svg') ? 'image' : 'image'} fetchpriority="high" />
    ))}

    {/* Fontes otimizadas */}
    <Fragment set:html={fontHtml} />

    {/* Critical CSS inline para renderização rápida inicial */}
    <style is:inline>
      /* Estilos críticos para renderização inicial */
      html{font-family:Inter,system-ui,-apple-system,BlinkMacSystemFont,sans-serif;scroll-behavior:smooth}body{margin:0;padding:0;min-height:100vh;background-color:#f8fafc}img{max-width:100%;height:auto}.container{width:100%;max-width:1280px;margin:0 auto;padding:0 1rem}.hidden{display:none}.header{position:sticky;top:0;z-index:50;background-color:#fff}.product-card{display:grid;grid-template-rows:max-content auto}.prose{max-width:unset}.backdrop{position:fixed;inset:0;background:rgba(0,0,0,.5);z-index:40;visibility:hidden;opacity:0;transition:opacity .3s ease,visibility .3s ease}.backdrop.active{visibility:visible;opacity:1}
    </style>

    <slot name="head" />

    <SEO
      charset="utf-8"
      title={title}
      description={description}
      canonical={canonicalUrl || Astro.url}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: ogImageUrl
        },
        optional: {
          description: description
        }
      }}
      twitter={{
        card: "summary_large_image",
        title: title,
        description: description,
        image: ogImageUrl,
        site: canonicalUrl || Astro.url.href,
        imageAlt: description
      }}
      extend={{
        // Metadados para mobile e performance
        meta: [
          { name: "theme-color", content: "#ffffff" },
          { name: "color-scheme", content: "light" },
          { name: "mobile-web-app-capable", content: "yes" },
          { name: "apple-mobile-web-app-capable", content: "yes" },
          { name: "apple-mobile-web-app-status-bar-style", content: "default" },
          { name: "format-detection", content: "telephone=no" }
        ],
        link: [
          {
            rel: "icon",
            href: faviconUrl || "/favicon.svg",
            type: faviconUrl ? "image/png" : "image/svg+xml"
          },
          {
            rel: "apple-touch-icon",
            href: "/apple-touch-icon.png"
          },
          // Manifest para PWA
          {
            rel: "manifest",
            href: "/manifest.json"
          }
        ]
      }}
    />
  </head>

  <body class={`max-w-screen w-full ${bodyClasses}`}>
    <div
      x-data={`{
        backupOfToastMessage: '',
        init() {
          $watch('toastMessage', () => {
            if (toastMessage) {
              this.backupOfToastMessage = toastMessage
            }
          })
        }
      }`}
      x-cloak
      x-show="toastMessage"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 transform -translate-y-2"
      x-transition:enter-end="opacity-100 transform translate-y-0"
      x-transition:leave="transition ease-in duration-300"
      x-transition:leave-start="opacity-100 transform translate-y-0"
      x-transition:leave-end="opacity-0 transform -translate-y-2"
      x-init="setTimeout(() => toastMessage = '', 5000)"
      class="z-50 toast toast-top toast-center max-w-sm w-full"
    >
      <div role="alert" class="max-w-sm w-full shadow-lg alert alert-info bg-cyan-100 border-cyan-200 text-cyan-900">
        <Icon pack="lucide" name="check-circle" height={20} width={20} class="shrink-0" />
        <span class="p-0 m-0 w-full text-wrap inline-block" x-text="toastMessage || '-'"></span>
      </div>
    </div>

    <div
      x-data={`{
        backupOfToastErrorMessage: '',
        init() {
          $watch('toastErrorMessage', () => {
            if (toastErrorMessage) {
              this.backupOfToastErrorMessage = toastErrorMessage
            }
          })
        }
      }`}
      x-cloak
      x-show="toastErrorMessage"
      x-transition:enter="transition ease-out duration-300"
      x-transition:enter-start="opacity-0 transform -translate-y-2"
      x-transition:enter-end="opacity-100 transform translate-y-0"
      x-transition:leave="transition ease-in duration-300"
      x-transition:leave-start="opacity-100 transform translate-y-0"
      x-transition:leave-end="opacity-0 transform -translate-y-2"
      class="z-50 toast toast-top toast-center max-w-sm w-full"
    >
      <div
        role="alert"
        class="max-w-sm w-full grid grid-cols-[auto_1fr] gap-2 shadow-lg alert alert-error bg-red-100 border-red-200 text-red-900"
      >
        <Icon pack="lucide" name="octagon-alert" height={20} width={20} class="shrink-0" />
        <p class="p-0 m-0 w-full text-wrap inline-block" x-text="backupOfToastErrorMessage || '-'" class="w-full"></p>
      </div>
    </div>

    {
      /* The prose class from @tailwindcss/typography plugin provides beautiful typographic defaults for HTML content like articles, blog posts, and documentation. It styles headings, lists, code blocks, tables etc. */
    }
    <div class="prose max-w-[unset]">
      <slot />
    </div>

    {/* One Dollar Stats, by Drizzle */}
    <script is:inline defer data-site-id="freedom.faith.tools" src="https://assets.onedollarstats.com/tracker.js"
    ></script>
    
    <!-- Service Worker para cache offline e melhor performance -->
    <ServiceWorkerScript />
  </body>
</html>

<script is:inline src="https://unpkg.com/htmx.org@1.9.5"></script>
<script is:inline>
  // Garantir que htmx esteja disponível globalmente
  window.htmx = window.htmx || { on: () => {}, off: () => {}, trigger: () => {} };
</script>

<script is:inline>
  // Inicializar sistemas de performance
  document.addEventListener('DOMContentLoaded', () => {
    // Carregar gerenciadores de performance apenas quando o DOM estiver pronto
    import('/lib/performance/font-loader.js').then(module => {
      module.initFontLoader({
        criticalFonts: ['Inter']
      });
    }).catch(err => console.warn('Erro ao carregar font-loader:', err));

    // Inicializar gerenciador de prefetch inteligente
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => {
        import('/lib/performance/prefetch-manager.js').then(module => {
          module.initPrefetchManager();
        }).catch(err => console.warn('Erro ao carregar prefetch-manager:', err));
      });
    } else {
      setTimeout(() => {
        import('/lib/performance/prefetch-manager.js').then(module => {
          module.initPrefetchManager();
        }).catch(err => console.warn('Erro ao carregar prefetch-manager:', err));
      }, 2000);
    }

    // Iniciar cache adaptativo após carregamento completo da página
    window.addEventListener('load', () => {
      if ('requestIdleCallback' in window) {
        requestIdleCallback(() => {
          import('/lib/performance/adaptive-cache.js').then(module => {
            module.initAdaptiveCache();
          }).catch(err => console.warn('Erro ao carregar adaptive-cache:', err));
        });
      }
    });
  });

  // Inicializar suporte para Core Web Vitals
  (function() {
    // Reportar Web Vitals para analytics
    const reportWebVitals = ({ name, delta, id }) => {
      if (navigator.sendBeacon) {
        navigator.sendBeacon('/api/metrics/web-vitals', JSON.stringify({
          name,
          value: delta,
          id,
          page: location.pathname
        }));
      }
    };
    
    // Se supportado, inicializar medição de Web Vitals
    if ('onLCP' in window) {
      window.onLCP(reportWebVitals);
      window.onFID(reportWebVitals);
      window.onCLS(reportWebVitals);
      window.onINP && window.onINP(reportWebVitals);
    }
  })();
</script>
